{"version":3,"sources":["Navbar.js","Home.js","Docs.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","href","Component","Home","state","date","Date","onChange","setState","handleOnClick","redirect","this","push","value","onClickDay","Docs","document","localStorage","getItem","arr","JSON","parse","length","rows","cols","type","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sVAuBeA,EArBf,uKAEQ,OACI,yBAAKC,UAAU,QACb,yBAAKA,UAAU,UAC3B,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,kBACZ,4BAAI,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,KAA/B,UACJ,4BAAI,uBAAGD,UAAU,YAAYE,KAAK,KAA9B,WACJ,4BAAI,uBAAGF,UAAU,YAAYE,KAAK,KAA9B,UACJ,4BAAI,uBAAGF,UAAU,YAAYE,KAAK,KAA9B,YACJ,4BAAI,uBAAGF,UAAU,YAAYE,KAAK,KAA9B,eACJ,4BAAI,uBAAGF,UAAU,YAAYE,KAAK,KAA9B,qBAZV,GAA4BC,a,eCsBbC,EArBf,4MACIC,MAAQ,CAACC,KAAM,IAAIC,MADvB,EAEQC,SAAW,SAAAF,GAAI,OAAI,EAAKG,SAAS,CAAEH,UAF3C,EAGQI,cAAc,WACV,EAAKD,SAAS,CAACE,UAAS,KAJpC,uDAOQ,OAAGC,KAAKP,MAAMM,SACJ,kBAAC,IAAD,CAAUE,MAAI,EAACZ,GAAG,UAGxB,6BACA,wBAAID,UAAU,OAAd,eACA,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAAUQ,SAAUI,KAAKJ,SAAUM,MAAOF,KAAKP,MAAMC,KAAMS,WAAYH,KAAKF,sBAd5F,GAA0BP,aCqBXa,EAvBf,4MACIX,MAAM,CAACY,SAAS,MADpB,kEAII,GAAqC,MAAlCC,aAAaC,QAAQ,YACxB,CACG,IAAIC,EAAIC,KAAKC,MAAMJ,aAAaC,QAAQ,aACxCP,KAAKH,SAAS,CAACQ,SAASG,EAAIG,YAPnC,+BAWQ,OACI,yBAAKvB,UAAU,OACX,yCACJ,8BACQ,8BAAUc,MAAOF,KAAKP,MAAMY,SAAUO,KAAK,KAAKC,KAAK,OAAM,6BAC3D,2BAAOC,KAAK,SAASZ,MAAM,eAhB/C,GAA0BX,a,wBCwBXwB,MAff,WAAgB,IAAD,EACb,OACE,6BACE,kBAAC,IAAD,KAEA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW9B,IAC3B,kBAAC,IAAD,KACG,kBAAC,KAAD,GAAO+B,OAAK,EAACF,KAAK,KAAlB,oDAAuCxB,GAAvC,KAEA,kBAAC,IAAD,CAAOwB,KAAK,QAAQE,OAAK,EAACD,UAAWb,OCP1Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25ba8e54.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nexport class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n              <nav className=\"navbar\">\r\n  <div className=\"container-fluid\">\r\n    <ul className=\"nav navbar-nav\">\r\n      <li><Link className=\"nav-links\" to=\"/\">Home </Link></li>\r\n      <li><a className=\"nav-links\" href=\"#\">Notes </a></li>\r\n      <li><a className=\"nav-links\" href=\"#\">Tags </a></li>\r\n      <li><a className=\"nav-links\" href=\"#\">Report </a></li>\r\n      <li><a className=\"nav-links\" href=\"#\">Templates </a></li>\r\n      <li><a className=\"nav-links\" href=\"#\">Contacts</a></li>\r\n    </ul>\r\n  </div>\r\n</nav>  \r\n  </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar\r\n","import React, { Component } from 'react';\r\nimport Calendar from \"react-calendar\";\r\nimport {Redirect} from 'react-router';\r\nexport class Home extends Component {\r\n    state = {date: new Date()}\r\n        onChange = date => this.setState({ date })\r\n        handleOnClick=()=>{\r\n            this.setState({redirect:true});\r\n        }\r\n    render() {\r\n        if(this.state.redirect){\r\n            return<Redirect push to=\"/Docs\"></Redirect>\r\n        }\r\n        return (\r\n            <div>\r\n            <h1 className=\"App\">Your Diary.</h1>\r\n            <div className=\"cal\">\r\n                <Calendar onChange={this.onChange} value={this.state.date} onClickDay={this.handleOnClick}/>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home\r\n","import React, {useEffect,useState,Component } from 'react';\r\nexport class Docs extends Component {\r\n    state={document:null}\r\n  componentDidMount()\r\n  {\r\n    if(localStorage.getItem('document')!=null)\r\n    {\r\n       let arr=JSON.parse(localStorage.getItem('document'));\r\n       this.setState({document:arr.length})\r\n    }\r\n}\r\n    render() {\r\n        return (\r\n            <div className=\"doc\">\r\n                <h1> Document</h1>\r\n            <form>\r\n                    <textarea value={this.state.document} rows=\"15\" cols=\"40\"/><br></br>\r\n                    <input type=\"submit\" value=\"Done\"/>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Docs\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport Docs from './Docs';\nimport 'react-calendar/dist/Calendar.css';\nimport './Home.css';\nimport './Navbar.css';\nimport './doc.css';\nimport {Route,Switch,BrowserRouter as Router} from 'react-router-dom';\nfunction App() {\n  return (\n    <div>\n      <Router>\n      \n      <Route path='/' component={Navbar}/>\n      <Switch>\n         <Route exact path='/' exact component={Home}/>\n         </Switch>\n         <Route path='/Docs' exact component={Docs}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}